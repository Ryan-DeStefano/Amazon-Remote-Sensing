---
title: "Peru Palm Oil Application"
author: "Ryan DeStefano"
format: 
  html:
    code-fold: true
    code-line-numbers: true
    code-tools: true
    self-contained: true
editor: source
execute: 
  cache: true
---

```{r}
library(sf)
library(dplyr)
library(purrr)
library(data.table)
library(stringr)
library(rgee)
library(lwgeom)
library(leaflet)
library(LandsatTS)
```

```{r}
set.seed(27)

main <- st_read(
  "04 Dataset_Ucayali_Palm_V2.geojson")

main <- st_make_valid(main)

# Check the current coordinate reference system
st_crs(main)

# Transform to WGS84 (EPSG:4326)
main <- st_transform(main, crs = 4326)
```

```{r}
main <- main[st_is_valid(main),]

areas <- st_area(main$geometry)

# If you want to add the area as a new column in your dataset
main$AREA <- areas
```

```{r}
main <- main %>% 
  arrange(desc(AREA)) 

main$estimated_points <- main$AREA / 0.00000006

# Define the number of points to sample from each polygon
n.pts_per_polygon <- 25  # Change this value as needed

# Create an empty tibble to store the sampled points
test <- tibble(geometry = vector("list", nrow(main) * n.pts_per_polygon),
               sample_id = character(nrow(main) * n.pts_per_polygon))

# Initialize the sample ID counter
sample_counter <- 1

# Loop through each region to sample points
for (i in 1:nrow(main)) {
  # Sample points from the i-th polygon
  pts <- st_sample(x = main[i, ], size = n.pts_per_polygon)
  
  # Convert the sampled points to their WKT representation
  point_wkt <- st_as_text(pts)
  
  # Determine the indices to store the sampled points
  start_index <- (i - 1) * n.pts_per_polygon + 1
  end_index <- i * n.pts_per_polygon
  
  # Store the WKT representation of the sampled point geometries and sample IDs in the test tibble
  test$geometry[start_index:end_index] <- point_wkt
  test$sample_id[start_index:end_index] <- paste0('S_', sample_counter:(sample_counter + n.pts_per_polygon - 1))
  
  # Increment the sample ID counter
  sample_counter <- sample_counter + n.pts_per_polygon
}

# Convert the test tibble to an sf object
test_sf <- st_as_sf(test, wkt = "geometry", crs=4326)

leaflet() %>%
  addProviderTiles('Esri.WorldImagery') %>%
  addPolygons(data = main,
              color = 'white',
              weight = 3) %>%
  addScaleBar(options = scaleBarOptions(imperial = FALSE))
```
